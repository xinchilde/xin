<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>发现微博图片可以链接找到发图的人</title>
      <link href="2021/05/26/62640.html"/>
      <url>2021/05/26/62640.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>说明：</strong>不多说了，建议在微博少发黄图和一些隐私图吧，毕竟网络不是法外之地。</p><p>用到的工具：16进制转10进制（百度直接搜索“16转10进制”就行）</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>例如链接为<code>https://ww3.sinaimg.cn/bmiddle/78e78bf4ly1gqvzy0nsvjj20n04ab1kx.jpg</code>的图。</p><p>提取文件名<code>78e78bf4ly1gqvzy0nsvjj20n04ab1kx</code>，前<code>8</code>位<code>78e78bf4</code>用<code>16</code>进制转换下变为<code>2028440564</code>，就是<code>用户uid</code>。</p><p>如果是<code>http://wx1.sinaimg.cn/mw690/006r2HqOgy1fj7dxg3zuxj30p02a1wry.jpg</code>这种<code>005</code>、<code>006</code>开头的就用<code>62</code>进制转，至于为什么出现这个应该是发现<code>8</code>位<code>16</code>进制存不下了。</p><p><strong>方法来源：</strong><a href="https://www.v2ex.com/t/388152">https://www.v2ex.com/t/388152</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微博 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT钩子函数之post-receive</title>
      <link href="2021/05/16/60024.html"/>
      <url>2021/05/16/60024.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Server端"><a href="#1-Server端" class="headerlink" title="1.Server端"></a>1.Server端</h2><h3 id="第一步-创建初始化一个裸仓库-用来添加钩子函数"><a href="#第一步-创建初始化一个裸仓库-用来添加钩子函数" class="headerlink" title="第一步.创建初始化一个裸仓库(用来添加钩子函数)"></a>第一步.创建初始化一个裸仓库(用来添加钩子函数)</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git init --bare test_git_hook_function.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第二步-通过裸仓库创建一个用来存放代码的仓库"><a href="#第二步-通过裸仓库创建一个用来存放代码的仓库" class="headerlink" title="第二步.通过裸仓库创建一个用来存放代码的仓库"></a>第二步.通过裸仓库创建一个用来存放代码的仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git init test_git_hook_function#/home/git/test_git_hook_function.git是上面创建的仓库地址git remote add origin /home/git/test_git_hook_function.gitgit clean -dfgit pull origin master:master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三步-创建钩子并赋权限"><a href="#第三步-创建钩子并赋权限" class="headerlink" title="第三步.创建钩子并赋权限"></a>第三步.创建钩子并赋权限</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd /home/git/test_git_hook_function.git/hookstouch post-receivechmod +x post-receive #赋予可执行权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="第四步-编辑钩子内容"><a href="#第四步-编辑钩子内容" class="headerlink" title="第四步.编辑钩子内容"></a>第四步.编辑钩子内容</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/shapp_dir=你的代码目录 （例如: app_dir=/home/git/test_git_hook_function）cd $app_dir || exitunset GIT_DIR# dosomething...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第五步-测试钩子是否能运行"><a href="#第五步-测试钩子是否能运行" class="headerlink" title="第五步.测试钩子是否能运行"></a>第五步.测试钩子是否能运行</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sh post-receive #或者 ./post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-client端（新玩法）"><a href="#2-client端（新玩法）" class="headerlink" title="2.client端（新玩法）"></a>2.client端（新玩法）</h2><blockquote><p>此处用的ssh方式，亦可以使用http</p><p>玩法说明：本人在gitee上面已有一份代码库，想将代码上传递到服务器（线上打包部署）</p><p>gitee上面的仓库代码留作备份，服务器上面的仓库用来作钩子部署</p></blockquote><h3 id="第一步：克隆代码"><a href="#第一步：克隆代码" class="headerlink" title="第一步：克隆代码"></a>第一步：克隆代码</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">方法一：git clone origin git@gitee.com:gitee_user_name/test_git_hook_function.git方法二：git init test_git_hook_function #关联远程代码仓库git pull origin master:master #拉取代码git remote -v #查看现在对应的远程仓库    origin  git@gitee.com:gitee_user_name/test_git_hook_function.git (fetch)    origin  git@gitee.com:gitee_user_name/test_git_hook_function.git (push)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二步-新增一个推送仓库地址"><a href="#第二步-新增一个推送仓库地址" class="headerlink" title="第二步:新增一个推送仓库地址"></a>第二步:新增一个推送仓库地址</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> git remote add origin your_user_name@your_server_ip[端口]/origin_code_library_address 例如： git remote add origin ssh://git@166.12.35.98/home/git/test_git_hook_function.git 针对非22端口 git remote add origin ssh://git@166.12.35.98:110/home/git/test_git_hook_function.gitgit remote -v #查看有没有添加上去（此时有三个）origin  git@gitee.com:gitee_user_name/test_git_hook_function.git (push)    origin  git@gitee.com:gitee_user_name/test_git_hook_function.git (fetch)    origin  ssh://git@166.12.35.98:110/home/git/test_git_hook_function.git (push)    origin  ssh://git@166.12.35.98:110/home/git/test_git_hook_function.git (fetch)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三步：推送代码-（前提条件有配置ssh，否则可能会出现推送失败）"><a href="#第三步：推送代码-（前提条件有配置ssh，否则可能会出现推送失败）" class="headerlink" title="第三步：推送代码 （前提条件有配置ssh，否则可能会出现推送失败）"></a>第三步：推送代码 （前提条件有配置ssh，否则可能会出现推送失败）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#远程仓库的钩子函数也会被触动（有日志的话，会显示）git push origin master:master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-课外话"><a href="#3-课外话" class="headerlink" title="3.课外话"></a>3.课外话</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">修改远程地址: git remote set-url  origin 你的新地址hooks目录下的文件讲解（加上sample后缀，是为了避免触发）ClientSide hooks：  pre-commit：当执行commit动作时先执行此hook，可以用此hook做一些检查，比如代码风格检查，或者先跑测试。  prepare-commit-msg： 当commit时需要输入message前会触发此hook，可以用此hook来定制自己的default message信息。  commit-msg：当用户输入commit的message后被触发，可以用此hook校验message的信息，比如是否符合规定，有没有cr等。  post-commit：当commit完成后被触发，可以用此hook发送notification等。  pre-rebase： rebase之前会被触发，可以用此hook来拒绝所有的已经push的commits进行rebase操作。  post-merge：当merge成功后，会触发此hook。  pre-push：当push时，remote refs被更新，但是在所有的objects传输前被触发。  pre-auto-gc：当git gc --auto执行前被触发。在垃圾回收之前做一些验证或备份是挺不错的。ServerSide hooks: pre-receive：当收到push动作之前会被执行。 update：也是收到push动作之前被执行，但是有可能被执行多次，每个branch一次。 post-receive：当push动作已经完成的时候会被触发，可以用此hook来push notification等，比如发邮件，通知持续构建服务器等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-小提示"><a href="#4-小提示" class="headerlink" title="4.小提示"></a>4.小提示</h2><ul><li>建议地址尽量写全，例如：git push origin master:master 可由 git push 代替</li><li>更多git相关指令学习可参考 <a href="https://gitee.com/progit/">Pro Git</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安全问题</title>
      <link href="2021/05/16/25778.html"/>
      <url>2021/05/16/25778.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、查看安全相关指令"><a href="#一、查看安全相关指令" class="headerlink" title="一、查看安全相关指令"></a>一、查看安全相关指令</h2><h3 id="a-查看现有的用户以及可登录的用户"><a href="#a-查看现有的用户以及可登录的用户" class="headerlink" title="a.查看现有的用户以及可登录的用户"></a>a.查看现有的用户以及可登录的用户</h3><ul><li>查看所有用户：<strong>cat /etc/passwd</strong></li><li>查看可以登录系统的用户：<strong>cat /etc/passwd | grep -v /sbin/nologin | cut -d : -f 1</strong></li></ul><h3 id="b-查看用户登录历史信息"><a href="#b-查看用户登录历史信息" class="headerlink" title="b.查看用户登录历史信息"></a>b.查看用户登录历史信息</h3><ul><li><p><strong>last</strong>  [username] 查看登录成功记录信息(不加用户名查看当前用户)</p></li><li><p><strong>lastb</strong> [username ] 查看登录失败记录信息 (root用户可使用，不加用户名查所有)</p><blockquote><p>结合条件筛选更有趣哟。例如：lastb 用户名 | grep 指定IP #可查询指定ip登录失败的信息</p></blockquote></li></ul><h3 id="c-查看是否有可疑-IP-成功登录机器：less-var-log-secure-grep-‘Accepted’"><a href="#c-查看是否有可疑-IP-成功登录机器：less-var-log-secure-grep-‘Accepted’" class="headerlink" title="c.查看是否有可疑 IP 成功登录机器：less /var/log/secure|grep ‘Accepted’"></a>c.查看是否有可疑 IP 成功登录机器：less /var/log/secure|grep ‘Accepted’</h3><h3 id="d-用户最近使用过的指令：history"><a href="#d-用户最近使用过的指令：history" class="headerlink" title="d.用户最近使用过的指令：history"></a>d.用户最近使用过的指令：history</h3><h2 id="二、修改SSH端口"><a href="#二、修改SSH端口" class="headerlink" title="二、修改SSH端口"></a>二、修改SSH端口</h2><blockquote><p>特别说明：本人没有开启防火墙，没有开启SELinux.(使用云服务器的安全组控制端口权限)</p><p>查看SELinux状态命令：sestatus #disabled 关闭</p><p>查看防火墙状态命令：systemctl status firewalld  #Active: inactive (dead)灰色表示停止 <a href="https://blog.csdn.net/wade3015/article/details/90725871">查看更多</a></p></blockquote><h3 id="a-修改ssh端口"><a href="#a-修改ssh端口" class="headerlink" title="a.修改ssh端口"></a>a.修改ssh端口</h3><p><strong>vim /etc/ssh/sshd_config</strong> 找到Port 22 这行后面添加 <strong>Port new_port</strong> （按i进入编写模式，esc -&gt; : [冒号]–&gt;wq–&gt;回车）</p><h3 id="b-重启ssh服务：systemctl-restart-sshd-service"><a href="#b-重启ssh服务：systemctl-restart-sshd-service" class="headerlink" title="b.重启ssh服务：systemctl restart sshd.service"></a>b.重启ssh服务：<strong>systemctl restart sshd.service</strong></h3><h3 id="c-登录云服务器，找到安全组。关闭22端口；新增规则，加上你的新端口"><a href="#c-登录云服务器，找到安全组。关闭22端口；新增规则，加上你的新端口" class="headerlink" title="c.登录云服务器，找到安全组。关闭22端口；新增规则，加上你的新端口"></a>c.登录云服务器，找到安全组。关闭22端口；新增规则，加上你的新端口</h3><h3 id="d-开始愉快的使用：ssh-p-new-port-username-yourIp"><a href="#d-开始愉快的使用：ssh-p-new-port-username-yourIp" class="headerlink" title="d.开始愉快的使用：ssh -p new_port username@yourIp"></a>d.开始愉快的使用：ssh -p new_port username@yourIp</h3><h2 id="三、通过SSH免密登录"><a href="#三、通过SSH免密登录" class="headerlink" title="三、通过SSH免密登录"></a>三、通过SSH免密登录</h2><h3 id="a-创建ssh"><a href="#a-创建ssh" class="headerlink" title="a.创建ssh"></a>a.创建ssh</h3><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">-b(指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。) -C (提供一个新注释) -t(指定要创建的密钥类型。可以使用："rsa1"(SSH-1) "rsa"(SSH-2) "dsa"(SSH-2))-f (指定密钥文件名)ssh-keygen -t rsa -b 4096 -C "your_email@example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="b-将公钥存放到服务器-ssh下面，命名为authorized-keys-（注意权限问题）"><a href="#b-将公钥存放到服务器-ssh下面，命名为authorized-keys-（注意权限问题）" class="headerlink" title="b.将公钥存放到服务器.ssh下面，命名为authorized_keys （注意权限问题）"></a>b.将公钥存放到服务器.ssh下面，命名为authorized_keys （注意权限问题）</h3><ul><li><p>1.自动创建(推荐)</p><pre class="line-numbers language-none"><code class="language-none">ssh-copy-id -i ~/.ssh/id_rsa.pub user_name@your_ip (并输入密码) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2.手动创建</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">在用户目录下面创建.ssh目录（文件夹的访问权限必须是是700权限）在.ssh文件夹里面创建authorized_keys文件（文件必须是600权限）分别修改.ssh 和 authorized.keys 的访问权限chmod 700 ~/.sshchmod 600 ~/.ssh/authorized_keys编辑authorized.keys文件，填入生成好的公钥<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="c-测试连接，能进入就代表成功"><a href="#c-测试连接，能进入就代表成功" class="headerlink" title="c.测试连接，能进入就代表成功"></a>c.测试连接，能进入就代表成功</h3><p><strong>ssh -p 22 user_name@your_ip</strong> #端口为22时：<strong>ssh  user_name@your_ip</strong> 即可</p><h2 id="四、ssh配置config快速登录服务器"><a href="#四、ssh配置config快速登录服务器" class="headerlink" title="四、ssh配置config快速登录服务器"></a>四、ssh配置config快速登录服务器</h2><blockquote><p>用于已经可以实现ssh免密登录，配置config只是简化操作；</p><p>例如更改了端口之后：配置前：ssh -p 22 user_name@your_ip 配置后：ssh 别名</p></blockquote><h3 id="1-config文件放置目录：用户目录下面的-ssh目录里面"><a href="#1-config文件放置目录：用户目录下面的-ssh目录里面" class="headerlink" title="1.config文件放置目录：用户目录下面的.ssh目录里面"></a>1.config文件放置目录：用户目录下面的.ssh目录里面</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">以shell命令为例（windows可用<span class="token string">"windwos PowerShell"</span>软件、<span class="token string">"Git Bash Here"</span>）：~/.sshwindow也可以直接打开：C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>用户名<span class="token punctuation">\</span>.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-语法介绍"><a href="#2-语法介绍" class="headerlink" title="2.语法介绍"></a>2.语法介绍</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#重要提示：config文件里面不能出现备注，请删除“#”以及#后面的内容</span>Host alias1    HostName <span class="token number">49.228</span>.211.23 <span class="token comment">#【必填】服务器IP地址</span>    Port <span class="token number">22</span> <span class="token comment">#【必填】ssh端口，服务器默认为22</span>    User root <span class="token comment">#【必填】服务器用户名</span>    IdentityFile ~/.ssh/id_rsa <span class="token comment">#【非必填】指定ssh私钥文件地址，默认为~/.ssh/id_rsa</span>    Host alias2 <span class="token comment">#配置多个</span>    HostName <span class="token number">47.98</span>.211.233    Port <span class="token number">122</span>    User username <span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token comment">##可配置多个，此处以两个为例</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-食用方法"><a href="#3-食用方法" class="headerlink" title="3.食用方法"></a>3.食用方法</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ssh</span> alias1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-特别注意：config文件没有后缀"><a href="#4-特别注意：config文件没有后缀" class="headerlink" title="4.特别注意：config文件没有后缀"></a>4.特别注意：config文件没有后缀</h4><h2 id="结尾：额外知识"><a href="#结尾：额外知识" class="headerlink" title="结尾：额外知识"></a>结尾：额外知识</h2><h3 id="a-操作SSH-SSHD服务-查看-启动-重启-自启"><a href="#a-操作SSH-SSHD服务-查看-启动-重启-自启" class="headerlink" title="a.操作SSH/SSHD服务(查看/启动/重启/自启)"></a>a.操作SSH/SSHD服务(查看/启动/重启/自启)</h3><ul><li>查看状态：systemctl status sshd.service</li><li>启动服务：systemctl start sshd.service</li><li>重启服务：systemctl restart sshd.service</li><li>开机自启：systemctl enable sshd.service</li></ul><h3 id="b-SELinux相关"><a href="#b-SELinux相关" class="headerlink" title="b.SELinux相关"></a>b.SELinux相关</h3><ul><li>查看SELinux的ssh端口: semanage port -l | grep ssh</li><li>ELinux新增ssh端口: semanage port -a -t ssh_port_t -p tcp [new_port]</li><li>查看SELinux的所有端口: semanage port -l (可结合grep过滤)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="2021/05/16/48230.html"/>
      <url>2021/05/16/48230.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录部分命令，<a href="https://www.runoob.com/linux/linux-command-manual.html">更多请查看菜鸟教程</a> 。学习笔记，如有错误请大佬指点！！！</p></blockquote><h2 id="一、网络相关"><a href="#一、网络相关" class="headerlink" title="一、网络相关"></a>一、网络相关</h2><h3 id="1-wget：是一种下载工具。可以下载网络上的资源，有点类似于迅雷。"><a href="#1-wget：是一种下载工具。可以下载网络上的资源，有点类似于迅雷。" class="headerlink" title="1.wget：是一种下载工具。可以下载网络上的资源，有点类似于迅雷。"></a>1.wget：是一种下载工具。可以下载网络上的资源，有点类似于迅雷。</h3><p>比如安装redis时需要先下载redis软件然后再安装，那就用wget命令</p><h3 id="2-curl命令"><a href="#2-curl命令" class="headerlink" title="2.curl命令"></a>2.<a href="https://www.cnblogs.com/guge-94/p/12069111.html">curl</a>命令</h3><p>curl是一个利用URL规则在命令行下工作的文件传输工具，可以说是一款很强大的http命令行工具。它支持文件的上传和下载，是综合传输工具，但按传统，习惯称url为下载工具。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#语法</span><span class="token function">curl</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment">#参数</span>    -A/--user-agent <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>　　　　　　设置用户代理发送给服务器    -b/--cookie <span class="token operator">&lt;</span>name<span class="token operator">=</span>string/file<span class="token operator">&gt;</span>    cookie字符串或文件读取位置    -c/--cookie-jar <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>            操作结束后把cookie写入到这个文件中    -C/--continue-at <span class="token operator">&lt;</span>offset<span class="token operator">&gt;</span>         断点续转    -D/--dump-header <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>           把header信息写入到该文件中    -e/--referer                      来源网址    -f/--fail                         连接失败时不显示http错误    -o/--output                       把输出写到该文件中    -O/--remote-name                  把输出写到该文件中，保留远程文件的文件名    -r/--range <span class="token operator">&lt;</span>range<span class="token operator">&gt;</span>                检索来自HTTP/1.1或FTP服务器字节范围    -s/--silent                       静音模式。不输出任何东西    -T/--upload-file <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>           上传文件    -u/--user <span class="token operator">&lt;</span>user<span class="token punctuation">[</span>:password<span class="token punctuation">]</span><span class="token operator">&gt;</span>       设置服务器的用户和密码    -w/--write-out <span class="token punctuation">[</span>format<span class="token punctuation">]</span>           什么输出完成后    -x/--proxy <span class="token operator">&lt;</span>host<span class="token punctuation">[</span>:port<span class="token punctuation">]</span><span class="token operator">&gt;</span>          在给定的端口上使用HTTP代理    -<span class="token comment">#/--progress-bar                 进度条显示当前的传送状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本用法:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> http://www.linux.com <span class="token comment">#执行后，www.linux.com 的html就会显示在屏幕上了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Ps：由于安装linux的时候很多时候是没有安装桌面的，也意味着没有浏览器，因此这个方法也经常用于测试一台服务器是否可以到达一个网站</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">保存访问的网页<span class="token function">curl</span> http://www.linux.com <span class="token operator">&gt;&gt;</span> linux.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、进程相关"><a href="#二、进程相关" class="headerlink" title="二、进程相关"></a>二、进程相关</h2><h3 id="1-netstat命令用于显示网络状态。"><a href="#1-netstat命令用于显示网络状态。" class="headerlink" title="1.netstat命令用于显示网络状态。"></a>1.<a href="https://www.runoob.com/linux/linux-comm-netstat.html">netstat</a>命令用于显示网络状态。</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">部分参数：    -a或--all 显示所有连线中的Socket。    -A<span class="token operator">&lt;</span>网络类型<span class="token operator">&gt;</span>或--<span class="token operator">&lt;</span>网络类型<span class="token operator">&gt;</span> 列出该网络类型连线中的相关地址。    -c或--continuous 持续列出网络状态。    -h或--help 在线帮助。    -i或--interfaces 显示网络界面信息表单。    -l或--listening 显示监控中的服务器的Socket。    -M或--masquerade 显示伪装的网络连线。    -n或--numeric 直接使用IP地址，而不通过域名服务器。    -o或--timers 显示计时器。    -p或--programs 显示正在使用Socket的程序识别码和程序名称。<span class="token punctuation">(</span>PID<span class="token punctuation">)</span>    -s或--statistics 显示网络工作信息统计表。    -t或--tcp 显示TCP传输协议的连线状况。    -u或--udp 显示UDP传输协议的连线状况。    -V或--version 显示版本信息。    网络状态：LISTEN：侦听来自远方的TCP端口的连接请求SYN-SENT：再发送连接请求后等待匹配的连接请求（如果有大量这样的状态包，检查是否中招了）SYN-RECEIVED：再收到和发送一个连接请求后等待对方对连接请求的确认（如有大量此状态，估计被flood攻击了）ESTABLISHED：代表一个打开的连接FIN-WAIT-1：等待远程TCP连接中断请求，或先前的连接中断请求的确认FIN-WAIT-2：从远程TCP等待连接中断请求CLOSE-WAIT：等待从本地用户发来的连接中断请求CLOSING：等待远程TCP对连接中断的确认LAST-ACK：等待原来的发向远程TCP的连接中断请求的确认（不是什么好东西，此项出现，检查是否被攻击）TIME-WAIT：等待足够的时间以确保远程TCP接收到连接中断请求的确认CLOSED：没有任何连接状态网络<span class="token function">netstat</span> -an <span class="token operator">|</span> <span class="token function">grep</span> 端口 <span class="token operator">|</span> <span class="token function">wc</span> -l （wc -l显示满足条件的行数）<span class="token function">netstat</span> -an <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">80</span> <span class="token function">netstat</span> -anp <span class="token operator">|</span><span class="token function">grep</span> 端口 （查询对应端口的状态 p显示进程号）例子<span class="token function">netstat</span> -anp <span class="token operator">|</span><span class="token function">grep</span> <span class="token number">8080</span><span class="token operator">|</span> <span class="token function">grep</span> LISTENtcp6       <span class="token number">0</span>      <span class="token number">0</span> :::8080                 :::*                    LISTEN      <span class="token number">14749</span>/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-ps-英文全拼-process-status-命令用于显示当前进程的状态，类似于-windows-的任务管理器。"><a href="#2-ps-英文全拼-process-status-命令用于显示当前进程的状态，类似于-windows-的任务管理器。" class="headerlink" title="2.ps (英文全拼: process status)命令用于显示当前进程的状态，类似于 windows 的任务管理器。"></a>2.<a href="https://www.runoob.com/linux/linux-comm-ps.html">ps</a> (英文全拼: process status)命令用于显示当前进程的状态，类似于 windows 的任务管理器。</h3><pre class="line-numbers language-she'l'l" data-language="she'l'l"><code class="language-she'l'l">#查看该程序是由那个用户启动的ps -ef | grep [程序名称 or PID] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-kill-命令用于删除执行中的程序或工作"><a href="#3-kill-命令用于删除执行中的程序或工作" class="headerlink" title="3.kill 命令用于删除执行中的程序或工作"></a>3.<a href="https://www.runoob.com/linux/linux-comm-kill.html">kill</a> 命令用于删除执行中的程序或工作</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">kill</span> <span class="token punctuation">[</span>-s <span class="token operator">&lt;</span>信息名称或编号<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>程序<span class="token punctuation">]</span>　或　<span class="token function">kill</span> <span class="token punctuation">[</span>-l <span class="token operator">&lt;</span>信息编号<span class="token operator">&gt;</span><span class="token punctuation">]</span>参数说明：-l <span class="token operator">&lt;</span>信息编号<span class="token operator">&gt;</span> 　若不加<span class="token operator">&lt;</span>信息编号<span class="token operator">&gt;</span>选项，则 -l 参数会列出全部的信息名称。-s <span class="token operator">&lt;</span>信息名称或编号<span class="token operator">&gt;</span> 　指定要送出的信息。<span class="token punctuation">[</span>程序<span class="token punctuation">]</span> 　<span class="token punctuation">[</span>程序<span class="token punctuation">]</span>可以是程序的PID或是PGID，也可以是工作编号。使用 <span class="token function">kill</span> -l 命令列出所有可用信号。最常用的信号是：    <span class="token number">1</span> <span class="token punctuation">(</span>HUP<span class="token punctuation">)</span>：重新加载进程。    <span class="token number">9</span> <span class="token punctuation">(</span>KILL<span class="token punctuation">)</span>：杀死一个进程。    <span class="token number">15</span> <span class="token punctuation">(</span><span class="token environment constant">TERM</span><span class="token punctuation">)</span>：正常停止一个进程。例如：<span class="token function">kill</span> -9 <span class="token number">8080</span> <span class="token comment">#杀死占用80端口进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、文件相关"><a href="#三、文件相关" class="headerlink" title="三、文件相关"></a>三、文件相关</h2><h3 id="1-tar-解压命令"><a href="#1-tar-解压命令" class="headerlink" title="1.tar 解压命令"></a>1.<a href="https://www.runoob.com/linux/linux-comm-tar.html">tar</a> 解压命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">选项：-c: 建立压缩档案    -x：解压    -t：查看内容    -r：向压缩归档文件末尾追加文件    -u：更新原压缩包中的文件    这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。    下面的参数是根据需要在压缩或解压档案时可选的。    -z：有gzip属性的    -j：有bz2属性的    -Z：有compress属性的    -v：显示所有过程    -O：将文件解开到标准输出    参数-f是必须的    -f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。  查看<span class="token function">tar</span> -tf aaa.tar.gz   在不解压的情况下查看压缩包的内容压缩<span class="token function">tar</span> –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg<span class="token function">tar</span> –czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz<span class="token function">tar</span> –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2<span class="token function">tar</span> –cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z解压<span class="token function">tar</span> –xvf file.tar //解压 tar包<span class="token function">tar</span> -xzvf file.tar.gz //解压tar.gz<span class="token function">tar</span> -xjvf file.tar.bz2   //解压 tar.bz2tar –xZvf file.tar.Z //解压tar.Z总结<span class="token number">1</span>、*.tar 用 <span class="token function">tar</span> –xvf 解压<span class="token number">2</span>、*.gz 用 <span class="token function">gzip</span> -d或者gunzip 解压<span class="token number">3</span>、*.tar.gz和*.tgz 用 <span class="token function">tar</span> –xzf 解压<span class="token number">4</span>、*.bz2 用 <span class="token function">bzip2</span> -d或者用bunzip2 解压<span class="token number">5</span>、*.tar.bz2用tar –xjf 解压<span class="token number">6</span>、*.Z 用 uncompress 解压<span class="token number">7</span>、*.tar.Z 用tar –xZf 解例如  <span class="token comment"># tar -cf all.tar *.jpg 这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。 </span>  <span class="token comment"># tar -rf all.tar *.gif 这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。 </span>  <span class="token comment"># tar -uf all.tar logo.gif 这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。 </span>  <span class="token comment"># tar -tf all.tar 这条命令是列出all.tar包中所有文件，-t是列出文件的意思 </span>  <span class="token comment"># tar -xf all.tar 这条命令是解出all.tar包中所有文件，-x是解开的意思</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-unzip解压命令"><a href="#2-unzip解压命令" class="headerlink" title="2.unzip解压命令"></a>2.unzip解压命令</h3><pre class="line-numbers language-none"><code class="language-none">unzip [-cflptuvz][-agCjLMnoqsVX][-P &lt;密码&gt;][.zip文件][文件][-d &lt;目录&gt;][-x &lt;文件&gt;] 或 unzip [-Z]参数：    -c 将解压缩的结果显示到屏幕上，并对字符做适当的转换。    -f 更新现有的文件。    -l 显示压缩文件内所包含的文件。    -p 与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换。    -t 检查压缩文件是否正确。    -u 与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中。    -v 执行是时显示详细的信息。    -z 仅显示压缩文件的备注文字。    -a 对文本文件进行必要的字符转换。    -b 不要对文本文件进行字符转换。    -C 压缩文件中的文件名称区分大小写。    -j 不处理压缩文件中原有的目录路径。    -L 将压缩文件中的全部文件名改为小写。    -M 将输出结果送到more程序处理。    -n 解压缩时不要覆盖原有的文件。    -o 不必先询问用户，unzip执行后覆盖原有文件。    -P&lt;密码&gt; 使用zip的密码选项。    -q 执行时不显示任何信息。    -s 将文件名中的空白字符转换为底线字符。    -V 保留VMS的文件版本信息。    -X 解压缩时同时回存文件原来的UID/GID。    [.zip文件] 指定.zip压缩文件。    [文件] 指定要处理.zip压缩文件中的哪些文件。    -d&lt;目录&gt; 指定文件解压缩后所要存储的目录。    -x&lt;文件&gt; 指定不要处理.zip压缩文件中的哪些文件。    -Z unzip -Z等于执行zipinfo指令。##在unzip命令后，增加 -o的参数，则不再进行询问，直接覆盖原文件解压缩，节省了很多事儿。unzip -o file_name.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查找文件"><a href="#3-查找文件" class="headerlink" title="3.查找文件"></a>3.查找文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">find</span> / -name <span class="token string">'filename'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-查找目录"><a href="#4-查找目录" class="headerlink" title="4.查找目录"></a>4.查找目录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">find</span> / -name <span class="token string">'dirName'</span> -type d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-查找内容"><a href="#5-查找内容" class="headerlink" title="5.查找内容"></a>5.查找内容</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> -ri <span class="token string">'content'</span><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> -ril <span class="token string">'content'</span> 只显示文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-touch命令：创建文件"><a href="#6-touch命令：创建文件" class="headerlink" title="6.touch命令：创建文件"></a>6.<a href="https://www.runoob.com/linux/linux-comm-touch.html">touch</a>命令：创建文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-mkdir命令：创建目录"><a href="#7-mkdir命令：创建目录" class="headerlink" title="7.mkdir命令：创建目录"></a>7.<a href="https://www.runoob.com/linux/linux-comm-mkdir.html">mkdir</a>命令：创建目录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> <span class="token punctuation">[</span>-p<span class="token punctuation">]</span> dirName参数说明：-p 可创建多级目录，确保目录名称存在，不存在的就建一个。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-ln命令：软链接-类似于快捷方式"><a href="#8-ln命令：软链接-类似于快捷方式" class="headerlink" title="8.ln命令：软链接(类似于快捷方式)"></a>8.<a href="https://www.runoob.com/linux/linux-comm-ln.html">ln</a>命令：软链接(类似于快捷方式)</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">使用方式：ln <span class="token punctuation">[</span>-sf<span class="token punctuation">]</span> 源文件 目标文件选项：-s 就表示创建软链接了，不加的话就是创建硬链接　　  -f 表示存在的时候删除在创建例如：ln -s -i /opt/node/bin/node /usr/bin/node  <span class="token punctuation">(</span>接着就可以全局使用node了: node -v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、权限相关"><a href="#四、权限相关" class="headerlink" title="四、权限相关"></a>四、权限相关</h2><h3 id="1-chmod命令：用于控制用户对文件的权限的命令"><a href="#1-chmod命令：用于控制用户对文件的权限的命令" class="headerlink" title="1.chmod命令：用于控制用户对文件的权限的命令"></a>1.<a href="https://www.runoob.com/linux/linux-comm-chmod.html">chmod</a>命令：用于控制用户对文件的权限的命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> 权限 文件名权限分别对应文：件所有者（Owner）、用户组（Group）、其它用户（Other Users）权限又分为读<span class="token punctuation">(</span>r<span class="token punctuation">)</span>、写<span class="token punctuation">(</span>w<span class="token punctuation">)</span>、执行<span class="token punctuation">(</span>x<span class="token punctuation">)</span>,分别对应数字4、2、1例如：<span class="token function">chmod</span> <span class="token number">777</span> fileName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-chgrp命令：用于变更文件或目录的所属群组。"><a href="#2-chgrp命令：用于变更文件或目录的所属群组。" class="headerlink" title="2.chgrp命令：用于变更文件或目录的所属群组。"></a>2.<a href="https://www.runoob.com/linux/linux-comm-chgrp.html">chgrp</a>命令：用于变更文件或目录的所属群组。</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">基本语法：<span class="token function">chgrp</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> 用户组名称 dirname/filename <span class="token punctuation">..</span>.参数：-R <span class="token builtin class-name">:</span> 进行递归<span class="token punctuation">(</span> recursive <span class="token punctuation">)</span>的持续更改，即连同子目录下的所有文件、目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-chown命令：用于设置文件所有者和文件关联组的命令。"><a href="#3-chown命令：用于设置文件所有者和文件关联组的命令。" class="headerlink" title="3.chown命令：用于设置文件所有者和文件关联组的命令。"></a>3.<a href="https://www.runoob.com/linux/linux-comm-chown.html">chown</a>命令：用于设置文件所有者和文件关联组的命令。</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">基本语法：<span class="token function">chown</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> 用户名称 文件或目录<span class="token function">chown</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> 用户名称:用户组名称 文件或目录 <span class="token comment">#同时修改属主和属组</span>参数：-R <span class="token builtin class-name">:</span> 进行递归<span class="token punctuation">(</span> recursive <span class="token punctuation">)</span>的持续更改，即连同子目录下的所有文件、目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、用户相关"><a href="#五、用户相关" class="headerlink" title="五、用户相关"></a>五、用户相关</h2><h3 id="1-操作用户"><a href="#1-操作用户" class="headerlink" title="1.操作用户"></a>1.操作用户</h3><ul><li><p> 创建用户 ：adduser username 接着设置密码  passwd username</p></li><li><p> 创建用户并增加到工作组： useradd -g groupname username (注: -g 所属组 -d 家目录 -s 所用的shell)</p></li><li><p>给已有的用户增加工作组： usermod -G groupname username</p></li><li><p>临时关闭</p><ul><li><p>关闭用户账号：passwd  –l username</p></li><li><p>重新释放：passwd –u username </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">passwd</span> <span class="token punctuation">[</span>-k<span class="token punctuation">]</span> <span class="token punctuation">[</span>-l<span class="token punctuation">]</span> <span class="token punctuation">[</span>-u <span class="token punctuation">[</span>-f<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-d<span class="token punctuation">]</span> <span class="token punctuation">[</span>-S<span class="token punctuation">]</span> <span class="token punctuation">[</span>username<span class="token punctuation">]</span> 命令语法说明。-d 删除密码-f 强制执行-k 更新只能发送在过期之后-l 停止账号使用-S 显示密码信息-u 启用已被停止的账户-x 设置密码的有效期-g 修改群组密码-i 过期后停止用户账号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>永久性删除用户账号： userdel username </p></li><li><p> whoami 查看当前登录用户名</p></li><li><p>cat /etc/passwd 查看所有的用户信息 </p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">例如：root:x:0:0:root:/root:/bin/bash 含义: username<span class="token punctuation">(</span>用户名<span class="token punctuation">)</span>:passwd<span class="token punctuation">(</span>密码<span class="token punctuation">)</span>:userID<span class="token punctuation">(</span>用户id<span class="token punctuation">)</span>:groupID<span class="token punctuation">(</span>用户所在组id<span class="token punctuation">)</span>:comment<span class="token punctuation">(</span>备注<span class="token punctuation">)</span>:home directory<span class="token punctuation">(</span>用户家目录<span class="token punctuation">)</span>:shell<span class="token punctuation">(</span>shell命令所在目录<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-操作用户组"><a href="#2-操作用户组" class="headerlink" title="2.操作用户组"></a>2.操作用户组</h3><ul><li>创建用户组：groupadd groupname</li><li>删除用户组：groupdel groupname</li><li>强制删除该用户的主目录和主目录下的所有文件和子目录:  usermod –G groupname username </li><li> 查询用户组：cat /etc/group</li><li>groups：查看当前登录用户的组内成员</li><li>groups test ：查看test用户所在的组,以及组内成员</li></ul><h3 id="3-CentOS让一个用户没有登录权限"><a href="#3-CentOS让一个用户没有登录权限" class="headerlink" title="3.CentOS让一个用户没有登录权限"></a>3.CentOS让一个用户没有登录权限</h3><ul><li>第一种情况：还未建立用户时，可以使用以下命令</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">groupadd</span> groupname例子<span class="token function">useradd</span> -g groupname username -s /bin/false   //-s为默认shell，不给shell，也就不能登录<span class="token function">useradd</span> -g groupname username -s /sbin/nologin    //-s为默认shell，默认给予shell，但是不给登录shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种情况：当用户已经建立了，在建立时没有控制，现在需要取消用户登录权限，可以使用以下命令</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">切换到root用户，修改/etc/passwd文件<span class="token function">vi</span> /etc/passwd找到你要修改的用户所在的那一行，例如username:x:502:502::/home/username:/bin/bash，修改为以下代码username:x:502:502::/home/username:/sbin/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo优化篇：Nginx压缩和缓存</title>
      <link href="2021/05/16/58735.html"/>
      <url>2021/05/16/58735.html</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx模板一份，一切尽在其中。"><a href="#Nginx模板一份，一切尽在其中。" class="headerlink" title="Nginx模板一份，一切尽在其中。"></a>Nginx模板一份，一切尽在其中。</h2><blockquote><p> Tips:由于版本问题，配置文件可能存在不同的写法。例如：Nginx 版本为 nginx/1.15.0 以上请使用 listen 443 ssl 代替 listen 443 和 ssl on。<a href="https://cloud.tencent.com/document/product/400/35244">更多SSL 证书安装部署问题….</a></p></blockquote><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span><span class="token comment">#监听80端口</span><span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token comment">#填写绑定证书的域名</span><span class="token keyword">server_name</span> www<span class="token punctuation">.</span>your_domain<span class="token punctuation">.</span>com<span class="token punctuation">;</span> <span class="token comment">#把http的域名请求转成https</span><span class="token keyword">return</span> <span class="token number">301</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token comment"># 加上default_server是为了偷懒不写www时，直接访问youdomain.com不至于跑到其他二级域名去。</span><span class="token keyword">listen</span><span class="token number">443</span> <span class="token keyword">ssl</span> http2 default_server<span class="token punctuation">;</span><span class="token comment">#填写绑定证书的域名</span><span class="token keyword">server_name</span> www<span class="token punctuation">.</span>your_domain<span class="token punctuation">.</span>com<span class="token punctuation">;</span> <span class="token comment">#证书文件名称</span><span class="token keyword">ssl_certificate</span> <span class="token operator">/</span>your_path<span class="token operator">/</span>your_ssl_certificate<span class="token punctuation">.</span>crt<span class="token punctuation">;</span> <span class="token comment">#私钥文件名称</span><span class="token keyword">ssl_certificate_key</span> <span class="token operator">/</span>your_path<span class="token operator">/</span>your_ssl_certificate_key<span class="token punctuation">.</span>key<span class="token punctuation">;</span> <span class="token keyword">ssl_session_timeout</span> <span class="token number">5</span>m<span class="token punctuation">;</span><span class="token keyword">ssl_ciphers</span> ECDHE<span class="token operator">-</span>RSA<span class="token operator">-</span>AES128<span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>ECDHE<span class="token punctuation">:</span>ECDH<span class="token punctuation">:</span>AES<span class="token punctuation">:</span>HIGH<span class="token punctuation">:</span><span class="token operator">!</span>NULL<span class="token punctuation">:</span><span class="token operator">!</span>aNULL<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">:</span><span class="token operator">!</span>ADH<span class="token punctuation">:</span><span class="token operator">!</span>RC4<span class="token punctuation">;</span><span class="token comment"># 取消了 TLSv1 支持，感觉有点多余</span><span class="token keyword">ssl_protocols</span> TLSv1<span class="token punctuation">.</span><span class="token number">1</span> TLSv1<span class="token punctuation">.</span><span class="token number">2</span> TLSv1<span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>    <span class="token comment">#记录一下日志，www目录自己创建的，用来区分不同的域名</span>    <span class="token keyword">access_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>www<span class="token operator">/</span>access<span class="token punctuation">.</span>log main<span class="token punctuation">;</span>    <span class="token comment"># hexo的静态文件目录（此处以我的为例）</span>    <span class="token comment"># 重点：这个必须放置在外面，否则开启缓存之后无法访问</span>    <span class="token keyword">root</span>   <span class="token operator">/</span>path<span class="token operator">/</span>hexo_blog<span class="token operator">/</span>public<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token comment">#root   /path/hexo_blog/public; </span>        <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">## 开启压缩 -- begin</span>    <span class="token comment"># 开启gzip</span>    <span class="token keyword">gzip</span> off<span class="token punctuation">;</span><span class="token comment"># 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是0，不管页面多大都压缩  </span><span class="token keyword">gzip_min_length</span> <span class="token number">256</span><span class="token punctuation">;</span>    <span class="token comment"># gzip 压缩级别 1-10 数字越大，压缩率越高，cpu使用越强</span>    <span class="token keyword">gzip_comp_level</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">#这里设置无论header头是怎么样，都是无条件启用压缩</span><span class="token comment"># gzip_proxied any;</span>        <span class="token comment"># 进行压缩的文件类型</span> <span class="token keyword">gzip_types</span> text<span class="token operator">/</span>xml text<span class="token operator">/</span>css text<span class="token operator">/</span>javascript application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>php image<span class="token operator">/</span>jpeg image<span class="token operator">/</span>gif image<span class="token operator">/</span>png application<span class="token operator">/</span>xml application<span class="token operator">/</span>atom<span class="token operator">+</span>xml application<span class="token operator">/</span>rss<span class="token operator">+</span>xml application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml image<span class="token operator">/</span>svg<span class="token operator">+</span>xml text<span class="token operator">/</span>javascript application<span class="token operator">/</span>javascript application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>x<span class="token operator">-</span>json application<span class="token operator">/</span>json application<span class="token operator">/</span>x<span class="token operator">-</span>web<span class="token operator">-</span>app<span class="token operator">-</span>manifest<span class="token operator">+</span>json text<span class="token operator">/</span>css text<span class="token operator">/</span>plain text<span class="token operator">/</span>x<span class="token operator">-</span>component font<span class="token operator">/</span>opentype font<span class="token operator">/</span>ttf application<span class="token operator">/</span>x<span class="token operator">-</span>font<span class="token operator">-</span>ttf application<span class="token operator">/</span>vnd<span class="token punctuation">.</span>ms<span class="token operator">-</span>fontobject image<span class="token operator">/</span>x<span class="token operator">-</span>icon<span class="token punctuation">;</span><span class="token comment">#这里设置无论header头是怎么样，都是无条件启用压缩</span><span class="token keyword">gzip_proxied</span> any<span class="token punctuation">;</span>    <span class="token comment"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span>    <span class="token keyword">gzip_vary</span> on<span class="token punctuation">;</span><span class="token comment">#IE 6及一下禁用gzip </span><span class="token keyword">gzip_disable</span> <span class="token string">"MSIE [1-6]\.(?!.*SV1)"</span><span class="token punctuation">;</span>    <span class="token comment">## 开启压缩 -- end</span><span class="token comment">## 开启缓存 -- begin</span>    <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">:</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>gif<span class="token operator">|</span>png<span class="token operator">|</span>ico<span class="token operator">|</span>cur<span class="token operator">|</span>gz<span class="token operator">|</span>svg<span class="token operator">|</span>svgz<span class="token operator">|</span><span class="token keyword">mp4</span><span class="token operator">|</span>ogg<span class="token operator">|</span>ogv<span class="token operator">|</span>webm<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>        <span class="token keyword">expires</span>      <span class="token number">7</span>d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">:</span>js<span class="token operator">|</span>css<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>        <span class="token keyword">expires</span>      <span class="token number">7</span>d<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">#    location ~ .*\.(?:htm|html)$ {</span><span class="token comment">#        add_header Cache-Control "private, no-store, no-cache, must-revalidate, proxy-revalidate";</span><span class="token comment">#}</span><span class="token comment">## 开启缓存 -- end</span>    <span class="token keyword">error_page</span> <span class="token number">404</span> <span class="token operator">/</span><span class="token number">404.</span>html<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">404.</span>html <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="https证书免费申请地址（一次可使用12个月）"><a href="#https证书免费申请地址（一次可使用12个月）" class="headerlink" title="https证书免费申请地址（一次可使用12个月）"></a>https证书免费申请地址（一次可使用12个月）</h2><ul><li><p>腾讯云：<a href="https://buy.cloud.tencent.com/ssl">SSL证书选购 - 腾讯云 (tencent.com)</a><br><img src="https://img-blog.csdnimg.cn/20210516200340464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzY5Nzk3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>又拍云：<a href="https://www.upyun.com/">https://www.upyun.com/</a><br><img src="https://img-blog.csdnimg.cn/20210516200355913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzY5Nzk3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>FreeSSL：<a href="https://freessl.cn/">https://freessl.cn/</a><br><img src="https://img-blog.csdnimg.cn/20210516200349541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzY5Nzk3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="免费域名申请地址："><a href="#免费域名申请地址：" class="headerlink" title="免费域名申请地址："></a>免费域名申请地址：</h2><ul><li>freenom：<a href="http://www.freenom.com/zh/index.html">Freenom - 人人都熟悉的名字</a> (一次用一年)<br><img src="https://img-blog.csdnimg.cn/20210516200515218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzY5Nzk3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210516200907521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzY5Nzk3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210516201329923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzY5Nzk3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="免费dns解析器："><a href="#免费dns解析器：" class="headerlink" title="免费dns解析器："></a>免费dns解析器：</h2><ul><li>dnspod：<a href="https://www.dnspod.cn/products/dns">https://www.dnspod.cn/products/dns</a> </li><li>cloudflare：<a href="https://www.cloudflare.com/zh-cn/"> Cloudflare 中国官网 </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Nginx </tag>
            
            <tag> https </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo之渲染绕过</title>
      <link href="2020/04/28/17fd92ae.html"/>
      <url>2020/04/28/17fd92ae.html</url>
      
        <content type="html"><![CDATA[<h3 id="0x001-Hexo-渲染"><a href="#0x001-Hexo-渲染" class="headerlink" title="0x001 Hexo 渲染"></a>0x001 Hexo 渲染</h3><p>  在Hexo部署时会默认渲染source下的所有html页面，但有时候想在Hexo博客上单独自定义html页面或README.md时，却不希望被Hexo渲染。因此对某个文件或者目录进行排除渲染是非常必要的。</p><h3 id="0x002-方法一：font-matter"><a href="#0x002-方法一：font-matter" class="headerlink" title="0x002 方法一：font matter"></a>0x002 方法一：font matter</h3><p><code>Hexo</code>新建网站页面，然后将你的代码直接写入 <code>index.md</code> 中</p><p>在 <code>Front matter</code> 中添加 <code>layout: false</code>，此方法适用于单一的纯<code>HTML</code><br><code>CSS</code> 页面。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: toolsdate: <span class="token number">2020</span>-04-28 00:00:00type: <span class="token string">"tools"</span>layout: <span class="token boolean">false</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x003-方法二：skip-render"><a href="#0x003-方法二：skip-render" class="headerlink" title="0x003 方法二：skip render"></a>0x003 方法二：skip render</h3><p>在博客根目录下的 <code>_config.yml</code>，找到 <code>skip_render</code>，大概在32行左右，写入你想要的跳过渲染的路径，注意缩进和空格。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定目录跳过hexo渲染</span>skip_render:  - <span class="token string">'tools/*'</span>  - <span class="token string">'tools/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注释：<code>tools/*</code> 表示在目录 <code>source/fireworks</code> 下的文件全部跳过渲染，<code>tools/**</code> 表示在博客根目录 <code>source/tools/</code> 文件夹下的文件全部跳过渲染（例如页面的 js、css 在另一个文件夹中）。</p></blockquote><h3 id="0x004-案例：webstack-导航"><a href="#0x004-案例：webstack-导航" class="headerlink" title="0x004 案例：webstack 导航"></a>0x004 案例：webstack 导航</h3><p><code>webstack</code>是一个纯静态的网址导航网站，内容均由<code>viggo</code>收集并整理。项目基于<code>bootstrap</code>前端框架开发。</p><p><img src="https://camo.githubusercontent.com/41111c4c1d9922982f380566e6a2f8415204c52c/687474703a2f2f7777772e776562737461636b2e63632f6173736574732f696d616765732f707265766965772e676966" alt="image"></p><ul><li>Github：<a href="https://github.com/WebStackPage/WebStackPage.github.io">https://github.com/WebStackPage/WebStackPage.github.io</a></li></ul><p>在博客根目录 <code>source/</code>下新建<code>tools</code>，然后新建<code>index.html</code>,将<code>webstack</code>网页源码全选复制粘贴到里面。</p><ul><li>本站的webstack源码：<a href="view-source:http://luckyzmj.cn/tools/">view-source:http://luckyzmj.cn/tools/</a></li></ul><blockquote><p>注意：将源码里的部分信息以及跳转链接按照你真实个人博客的环境进行修改。</p></blockquote><p>然后打开博客根目录下配置文件<code>_config.yml</code>，找到<code>skip_render</code>，做如下修改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">skip_render:  - <span class="token string">'tools/*'</span>  - <span class="token string">'tools/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后执行<code>hexo clean</code>和<code>hexo s -g </code>本地预览，检查无误后<code>hexo g -d</code>部署到服务器上即可。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93">https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 渲染绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+GitHub 图床搭建</title>
      <link href="2020/03/15/7a46f93c.html"/>
      <url>2020/03/15/7a46f93c.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用GitHub搭建图床，在很久之前我就有了解，但由于市面上有挺多免费的图床，比如我之前一直在用的 路过图床，所以一直懒得动手搭建GitHub图床。一直到前两天我在完善博客的相册时，发现 路过图床 免费版的有这么多限制，比如：每小时限制上传50张图片，每天限制上传100张图片，而且免费版用户的存储容量貌似不过300M，这才意识到有一个自己的GitHub图床是多么重要。</p><h3 id="0x001-PicGO-介绍"><a href="#0x001-PicGO-介绍" class="headerlink" title="0x001 PicGO 介绍"></a>0x001 PicGO 介绍</h3><p>PicGo是一款图片上传工具，目前支持 SM.MS图床、腾讯云COS、GitHub图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，未来将支持更多图床。</p><p>在支持的这些图床中，SM.MS和Imgur有免费版和收费版，免费版的肯定有很多的使用限制，比如每小时限制上传次数，限制用户的上传容量等等；腾讯云COS、阿里云、有拍云都是要收费使用的；七牛云貌似前期使用免费，后期又要收费才能使用，就剩下的GitHub才是免费且最可靠的。</p><p>PicGo源项目GitHub地址已给出，但是去GitHub下载速度非常慢，这里额外提供一个蓝奏云的快速下载地址。</p><ul><li>GitHub地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></li><li>蓝奏云地址：<a href="https://luckyzmj.lanzous.com/id3e0id">https://luckyzmj.lanzous.com/id3e0id</a></li></ul><h3 id="0x002-GitHub-图床"><a href="#0x002-GitHub-图床" class="headerlink" title="0x002 GitHub 图床"></a>0x002 GitHub 图床</h3><h4 id="1-创建GitHub图床仓库"><a href="#1-创建GitHub图床仓库" class="headerlink" title="1. 创建GitHub图床仓库"></a>1. 创建GitHub图床仓库</h4><p>首先需要有一个登录GitHub的账号，没有的话去<a href="https://github.com/">GitHub官网</a>注册一个</p><p>创建一个新的图床仓库，点击右上角的New repository</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529155833.png"></p><p>填写如下配置信息，然后Create创建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529160010.png"></p><h4 id="2-获取GitHub-token值"><a href="#2-获取GitHub-token值" class="headerlink" title="2. 获取GitHub token值"></a>2. 获取GitHub token值</h4><p>点击右上的头像，选择设置Setting</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529160727.png"></p><p>点击选择Developer settings </p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529160939.png"></p><p>点击 Generate New token</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529161241.png"></p><p>填写如下配置信息，只要勾选repo选项即可，然后页面拉到底部点击Generate token 即可</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529161716.png"></p><p>此时会跳转到带有token的页面，将token值复制记录下来，之后用PicGo绑定GitHub图床时会利用到</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529162127.png"></p><h3 id="0x003-PicGo-配置"><a href="#0x003-PicGo-配置" class="headerlink" title="0x003 PicGo 配置"></a>0x003 PicGo 配置</h3><h4 id="1-绑定GitHub图床"><a href="#1-绑定GitHub图床" class="headerlink" title="1. 绑定GitHub图床"></a>1. 绑定GitHub图床</h4><p>首先下载安装好PicGo软件，然后在右列表找到GitHub图床配置</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529163130.png"></p><p><strong>1. 设定仓库名(必填)：</strong> </p><p>按照“GitHub账户名/仓库名的格式填写”，比如我的是：Luckyzmj/imgbed</p><p><strong>2. 设定分支名(必填)：</strong> </p><p>分支名统一填写“master”</p><p><strong>3. 设定Token(必填)：</strong> </p><p>将之前步骤的Token值复制粘贴到这里</p><p><strong>4. 指定存储路径：</strong> </p><p>这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的imgbed仓库下有个posts文件夹，需设置为 posts/</p><p><strong>5. 设定自定义域名：</strong> </p><p>这里统一用jsdelivr的CDN加速域名，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接</p><pre class="line-numbers language-none"><code class="language-none">自定义域名格式：https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名以我的格式为例：https://cdn.jsdelivr.net/gh/Luckyzmj/imgbed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置完全部信息后，点击 设为默认图床，最后点击确定即可</p><h4 id="2-上传图片到图床"><a href="#2-上传图片到图床" class="headerlink" title="2. 上传图片到图床"></a>2. 上传图片到图床</h4><p>在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529170555.png"></p><p>在图片区，可以看到成功上传的图片，选择相应的图片进行操作即可</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529170831.png"></p><h4 id="3-PicGo-注意事项"><a href="#3-PicGo-注意事项" class="headerlink" title="3. PicGo 注意事项"></a>3. PicGo 注意事项</h4><p>如果配置完PicGo后却上传图片失败，可以参考以下方法：</p><ol><li>检查自定义域名是否正确</li><li>仓库名不要有空格</li><li>图片名字不要带有特殊符号，如：%、+、*、空格等</li><li>建议开启时间戳重命名，防止图片名字重复</li><li>上传图片间歇太短，需在PicGo设置中关闭Server选项</li><li>PicGo应用不稳定因素，需重启应用</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/sunhwee/article/details/100109956">https://blog.csdn.net/sunhwee/article/details/100109956</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> GitHub图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器部署Hexo博客</title>
      <link href="2020/02/27/19d2a4e6.html"/>
      <url>2020/02/27/19d2a4e6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>  相信大部分人使用Hexo搭建个人博客都会部署到一些免费的代码托管平台上，但这些免费的平台总是差强人意，比如国外的GitHub平台虽然完全免费，但在国内访问加载速度非常慢，又或者是国内的码云平台免费版有许多功能被阉割掉了，比如不能自定义域名，不能每次自动刷新提交的代码，需要到码云平台上手动刷新，如此一来非常繁琐。</p><p>  为了有效解决上诉的一些问题，有条件的话，不妨在自己的云服务器上搭建Hexo博客。</p><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><hr><p>这是Hexo博客部署到GitHub上的网站测速效果</p><p><img src="https://s1.ax1x.com/2020/03/12/8mhkv9.png" alt="演示demo1"></p><p>这是Hexo博客部署到阿里云服务器后的网站测速效果</p><p><img src="https://s1.ax1x.com/2020/03/12/8mWYQA.png" alt="演示demo2"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><hr><ul><li>本地环境：Windows 10 </li><li>云服务器环境：阿里云ECS（CentOS7.x）</li></ul><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><hr><h3 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h3><p><strong>1.安装Git</strong></p><p>到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>。</p><ul><li>Git<a href="https://git-scm.com/download">下载地址</a></li><li>Git<a href="https://www.liaoxuefeng.com/wiki/896043488029600">教程</a></li></ul><p><strong>2.安装Nodejs</strong></p><p>到<a href="http://nodejs.cn/download/">Node.js官网</a>下载<code>.exe</code>文件，安装选项全部默认。安装好之后，按<code>Win+R</code>打开cmd命令提示符，输入<code>node -v</code>和<code>npm -v</code>，若出现版本号，则说明安装成功。</p><p>使用npm阿里的国内镜像进行加速下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.安装Hexo</strong></p><p>先创建一个文件夹<code>MyBlog</code>，用来存放自己的博客文件，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键<code>git bash here</code>打开）。</p><p>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装<code>Hexo</code>。可能会有几个报错，不用理会。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后输入<code>hexo -v</code>,若出现版本号则，说明安装成功。</p><p>接下来初始化一下<code>hexo</code>,即初始化我们的博客，输入<code>hexo init</code>初始化文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init MyBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建完成后，指定文件夹<code>MyBlog</code>目录下有：</p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题**</li><li><code>_config.yml</code>: 博客的配置文件**</li></ul><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器预览</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/03/12/8VdlGD.png" alt="Hexo"></p><h3 id="生成ssh公钥"><a href="#生成ssh公钥" class="headerlink" title="生成ssh公钥"></a>生成ssh公钥</h3><p>在本地桌面点击右键<code>Git Bash Here</code>打开Git终端，执行如下命令`,一路回车</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在<code>git bash</code>中输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的内容就是公钥信息了</p><h3 id="阿里云服务器环境搭建"><a href="#阿里云服务器环境搭建" class="headerlink" title="阿里云服务器环境搭建"></a>阿里云服务器环境搭建</h3><p>安装<code>Git</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建<code>Git</code>账户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加账户权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">740</span> /etc/sudoers<span class="token function">vim</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>找到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Allow root to run any commands anywhere</span>root    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span>   <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存退出并改回权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">400</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置<code>git</code>账户密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换至<code>git</code>用户，创建 <code>~/.ssh</code> 文件夹和 <code>~/.ssh/authorized_keys</code> 文件，并赋予相应的权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> <span class="token function">git</span><span class="token function">mkdir</span> ~/.ssh<span class="token function">vim</span> ~/.ssh/authorized_keys<span class="token comment"># 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys</span><span class="token function">chmod</span> <span class="token number">600</span> /home/git/.ssh/authorized_keys<span class="token function">chmod</span> <span class="token number">700</span> /home/git/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本地<code>Git</code>终端中测试是否能免密登录<code>git</code>，其中<code>SERVER</code>为填写自己的云主机<code>IP</code>，执行输入<code>yes</code>后不用密码就说明好了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -v git@SERVER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#repo作为为Git仓库目录</span><span class="token function">mkdir</span> /var/repo<span class="token function">chown</span> -R git:git /var/repo<span class="token function">chmod</span> -R <span class="token number">755</span> /var/repo<span class="token comment">#hexo作为网站根目录</span><span class="token function">mkdir</span> /var/www/hexo<span class="token function">chown</span> -R git:git /var/www/hexo<span class="token function">chmod</span> -R <span class="token number">755</span> /var/www/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后创建一个裸的 <code>Git</code> 仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> var/repo<span class="token function">git</span> init --bare hexoBlog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个新的 <code>Git</code> 钩子，用于自动部署 在 <code>/var/repo/hexoBlog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹。我们需要在里边新建一个新的钩子文件 <code>post-receive</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/repo/hexoBlog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按 <code>i</code> 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 <code>Git</code> 的工作树（源代码）和 <code>Git</code> 目录（配置文件等）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/var/www/hexo --git-dir<span class="token operator">=</span>/var/repo/hexoBlog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，按 <code>Esc</code> 键退出编辑模式，输入”<code>:wq</code>” 保存退出。</p><p>修改文件权限，使得其可执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/repo/hexoBlog.git/hooks/post-receive<span class="token function">chmod</span> +x /var/repo/hexoBlog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到此为止 <code>Git</code> 仓库就搭建完成了。</p><h3 id="阿里云服务器配置Nginx"><a href="#阿里云服务器配置Nginx" class="headerlink" title="阿里云服务器配置Nginx"></a>阿里云服务器配置Nginx</h3><p>用宝塔面板来一键部署Nginx <code>Linux</code>面板6.0安装命令(暂时仅兼容<code>Centos7.x</code>，其它系统版本请安装5.9稳定版)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Linux</code>面板6.0升级专业版</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://download.bt.cn/install/update6.sh<span class="token operator">|</span><span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后会显示面板后台地址·账号·密码。打开面板后台地址登陆面板，选择<code>Nginx</code>的部署方案，静静等待部署。</p><p>部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的<code>IP</code>地址)-底部的<code>PHP</code>版本选择”纯静态”-提交。 </p><p>网站创建完成后点击设置-配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server<span class="token punctuation">{</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>  <span class="token comment"># server_name 填写自己的域名</span>    server_name luckyzmj.cn blog.luckyzmj.cn<span class="token punctuation">;</span>    index index.php index.html index.htm default.php default.htm default.html<span class="token punctuation">;</span>  <span class="token comment"># 这里root填写自己的网站根目录，修改为/var/www/hexo</span>    root /var/www/hexo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-保存</p><p>点击设置-网站目录，修改为<code>/var/www/hexo</code> ，保存</p><p>重启宝塔面板服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> bt restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地Hexo部署到阿里云服务器"><a href="#本地Hexo部署到阿里云服务器" class="headerlink" title="本地Hexo部署到阿里云服务器"></a>本地Hexo部署到阿里云服务器</h3><p>进入到本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>,右键点击<code>Git Bash Here</code>，输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#定义邮箱(更换为你的邮箱地址就行)</span><span class="token function">git</span> config --global user.email <span class="token string">"you@example.com"</span><span class="token comment">#定义名称(更换自定义一个名称就行)</span><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置<code>_config.yml</code>,完成自动化部署 </p><p>打开本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>文件夹下的<code>_config.yml</code>, 找到<code>deploy</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  <span class="token comment">#server改为你的服务IP地址或解析后的域名</span>  <span class="token comment">#例如我改为repo: git@luckyzmj.cn:/var/repo/blog.git</span>  repo: git@server:/var/repo/blog.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存后，即可测试部署</p><p>再进入到本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>,右键点击<code>Git Bash Here</code>，输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不报错说明完成，打开浏览器输入你的域名或<code>ip</code>地址就可以看到你部署的<code>Hexo</code>博客了。 </p><p>到此为止，我们已经成功部完成，并且访问自己的服务器端比访问Github快多了。</p><blockquote><h3 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h3></blockquote><p>在部署过程中，执行 hexo d发现部署老是出错，什么权限不允许之类的，这里我们需要检查我们在上述的<code>git</code>操作部署是否使用了<code>git</code>用户操作，若是没有，需要给相应的目录更改用户组 使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/repo/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令递归的将<code>repo</code>目录及其子目录用户组设置为<code>git</code>。 同时使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/www/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样即可解决此类问题。</p><p>还有一个问题就是绑定域名后不能访问。原因是在国内任何域名只要绑定到国内的服务器主机上都必须去工信部和公安部备案完后才能正常使用。如果是港澳台的服务器或者是国外的服务器则可以不需要备案。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task">https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="2019/08/27/e3e08109.html"/>
      <url>2019/08/27/e3e08109.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x001-效果演示"><a href="#0x001-效果演示" class="headerlink" title="0x001 效果演示"></a>0x001 效果演示</h2><hr><p><img src="https://s2.ax1x.com/2020/03/11/8E3bBF.png" alt="演示Demo"></p><h2 id="0x002-简单介绍"><a href="#0x002-简单介绍" class="headerlink" title="0x002 简单介绍"></a>0x002 简单介绍</h2><hr><p>  前前后后大概花了一周多的时间，目前个人博客已经完善的差不多了，现在写个文章做个阶段总结，后续如果有更新的地方，会及时补充。本博客基于Hexo框架，采用<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a>主题，在这里非常感谢作者<code>洪卫</code>的<a href="https://github.com/shw2018/hexo-blog-fly.git">hexo-blog-fly</a>博客开源，极大简化了构建博客的工作量和复杂度。在此开源博客的基础上做了改进，修复了一些bug，顺利搭建完成了我的个人博客。大家对此主题有兴趣的可以<a href="https://github.com/shw2018/hexo-blog-fly">下载源代码</a>，搭建属于自己的个性化博客。</p><ul><li>个人博客 演示：<a href="http://luckyzmj.cn/">http://luckyzmj.cn</a></li></ul><hr><h2 id="0x003-Hexo-初级搭建"><a href="#0x003-Hexo-初级搭建" class="headerlink" title="0x003 Hexo 初级搭建"></a>0x003 Hexo 初级搭建</h2><hr><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><p><code>Git</code>是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<code>Git</code>的作用是将本地的网页文件传到<code>github</code>上。</p><ul><li>Git<a href="https://git-scm.com/download">下载地址</a></li><li>Git<a href="https://www.liaoxuefeng.com/wiki/896043488029600">教程</a></li></ul><p><strong>windows：</strong> 到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>。</p><h3 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2. 安装node.js"></a>2. 安装node.js</h3><p><code>Hexo</code>是基于<code>node.js</code>编写的，所以需要安装一下<code>node.js</code>和里面的<code>npm</code>工具。</p><p><strong>windows：</strong> 到<a href="http://nodejs.cn/download/">Node.js官网</a>下载<code>.exe</code>文件，安装选项全部默认。安装好之后，按<code>Win+R</code>打开cmd命令提示符，输入<code>node -v</code>和<code>npm -v</code>，若出现版本号，则说明安装成功。</p><h3 id="3-添加npm国内源"><a href="#3-添加npm国内源" class="headerlink" title="3. 添加npm国内源"></a>3. 添加npm国内源</h3><p>使用阿里的国内镜像进行加速下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h3><p>前面<code>git</code>和<code>nodejs</code>安装好后，就可以安装<code>hexo</code>了，你可以先创建一个文件夹<code>MyBlog</code>，用来存放自己的博客文件，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键<code>git bash</code>打开）。</p><p>比如我的博客文件都存放在<code>E:\MyBlog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开<code>git</code>的控制台窗口，以后我们所有的操作都在<code>git</code>控制台进行，就不用<code>Windows</code>自带的<code>cmd</code>了。</p><p>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装<code>Hexo</code>。可能会有几个报错，不用理会。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>到此为止<code>hexo</code>就安装完了。</p><p>接下来初始化一下<code>hexo</code>,即初始化我们的网站，输入<code>hexo init</code>初始化文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init MyBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建完成后，指定文件夹<code>MyBlog</code>目录下有：</p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题**</li><li><code>_config.yml</code>: 博客的配置文件**</li></ul><p>到此为止，本地的网站配置完成了。</p><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/03/12/8VdlGD.png"></p><h3 id="5-注册Github账号创建个人仓库"><a href="#5-注册Github账号创建个人仓库" class="headerlink" title="5. 注册Github账号创建个人仓库"></a>5. 注册Github账号创建个人仓库</h3><p>接下来就去注册一个<code>github</code>账号，用来存放我们的网站。</p><p>打开<a href="https://github.com/">https://github.com/</a>，新建一个项目仓库<code>New repository</code>，如下所示：</p><p><img src="https://s1.ax1x.com/2020/03/12/8VwrtK.png"></p><p>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上</p><p><img src="https://s1.ax1x.com/2020/03/12/8VdoQJ.png"></p><blockquote><p>要创建一个和你用户名相同的仓库，后面加<code>.github.io</code>，只有这样，将来要部署到<code>GitHub page</code>的时候，才会被识别，也就是<code>http://xxxx.github.io</code>，其中xxx就是你注册<code>GitHub</code>的用户名。例如我的：<code>http://LuckyZmj.github.io</code></p></blockquote><h3 id="6-生成SSH添加到GitHub"><a href="#6-生成SSH添加到GitHub" class="headerlink" title="6. 生成SSH添加到GitHub"></a>6. 生成SSH添加到GitHub</h3><p>生成<code>SSH</code>添加到<code>GitHub</code>，连接<code>Github</code>与本地。<br>右键打开<code>git bash here</code>，然后输入下面命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"注册GitHub用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"注册GitHub的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用以下两条，检查一下你有没有输对</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后创建<code>SSH</code>,一路回车</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"注册GitHub的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在<code>git bash</code>中输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将输出的内容复制到框中，点击确定保存。</p><p>打开<code>github</code>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个<code>SSH</code>，名字随便取一个都可以，把你的<code>id_rsa.pub</code>里面的信息复制进去。如图：</p><p><img src="https://s1.ax1x.com/2020/03/12/8Vwnyj.png"></p><p>在<code>git bash</code>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-将hexo部署到GitHub"><a href="#7-将hexo部署到GitHub" class="headerlink" title="7. 将hexo部署到GitHub"></a>7. 将hexo部署到GitHub</h3><p>将<code>hexo</code>生成的文章部署到<code>GitHub</code>上，打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。<br>找到如下配置进行修改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: https://github.com/LuckyZmj/LuckyZmj.github.io  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>repository</code>修改为你自己的<code>github</code>项目地址即可，就是部署时，告诉工具，将生成网页通过<code>git</code>方式上传到你对应的链接仓库中。</p><p>这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以部署提交到<code>github</code>，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 <code>hexo clean</code>清除了你之前生成的东西。 <code>hexo generate</code>，生成静态文章，可以用 <code>hexo g</code>缩写 ，<code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写</p><blockquote><p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p></blockquote><h3 id="8-写文章和发布文章"><a href="#8-写文章和发布文章" class="headerlink" title="8. 写文章和发布文章"></a>8. 写文章和发布文章</h3><p>首先在博客根目录下右键打开<code>git bash here</code>，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入<code>hexo new post "article title"</code>，新建一篇文章。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new post <span class="token string">"article title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开<code>E:\MyBlog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件。</p><p>另外推荐直接使用<code>有道云</code>编写<code>markdown</code>文章，不仅可以实时预览，还可以快捷的生成<code>markdown</code>语法格式，具体效果如下图所示。</p><p><img src="https://s1.ax1x.com/2020/03/12/8VwItf.png" alt="有道云"></p><p>编写完<code>markdown</code>文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到<code>github</code>上。这时打开你的<code>github.io</code>主页就能看到发布的文章了。</p><p>到此为止，<code>Hexo</code>初级搭建就已经完成了。</p><h2 id="0x004-Hexo-优化定制"><a href="#0x004-Hexo-优化定制" class="headerlink" title="0x004 Hexo 优化定制"></a>0x004 Hexo 优化定制</h2><hr><h3 id="1-Hexo相关目录文件"><a href="#1-Hexo相关目录文件" class="headerlink" title="1. Hexo相关目录文件"></a>1. Hexo相关目录文件</h3><h4 id="1-1-博客目录构成介绍"><a href="#1-1-博客目录构成介绍" class="headerlink" title="1.1 博客目录构成介绍"></a>1.1 博客目录构成介绍</h4><p><code>node_modules</code>是<code>node.js</code>各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p><p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- node_modules- public- scaffolds- <span class="token builtin class-name">source</span>    - _data    - _posts    - about    - archives    - categories    - friends    - tags- themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-hexo基本配置"><a href="#1-2-hexo基本配置" class="headerlink" title="1.2 hexo基本配置"></a>1.2 hexo基本配置</h4><p>在文件根目录下的<code>_config.yml</code>，就是整<code>个hexo</code>框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。</p><h5 id="1-2-1-网站"><a href="#1-2-1-网站" class="headerlink" title="1.2.1 网站"></a>1.2.1 网站</h5><p>参数描述<code>title</code>网站标题<code>subtitle</code>网站副标题<code>description</code>网站描述<code>author</code>您的名字<code>language</code>网站使用的语言<code>timezone</code>网站时区。<code>Hexo</code> 默认使用您电脑的时区。时区列表。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</p><p>其中，<code>description</code>主要用于<code>SEO</code>，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h5 id="1-2-2-网址"><a href="#1-2-2-网址" class="headerlink" title="1.2.2 网址"></a>1.2.2 网址</h5><p>参数描述<code>url</code>网址<code>root</code>网站根目录 <code>permalink</code>文章的<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a>格式<code>permalink_defaults</code>永久链接中各部分的默认值</p><p>在这里，你需要把<code>url</code>改成你的网站域名。</p><p><code>permalink</code>，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">参数结果:year/:month/:day/:title       /2019/08/10/hello-world :year-:month-:day-:title.html  <span class="token number">2019</span>-08-10-hello-world.html :category/:titlefoo            /bar/hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-定制主题"><a href="#2-定制主题" class="headerlink" title="2. 定制主题"></a>2. 定制主题</h3><p>这里推荐作者<code>洪卫</code>的<a href="https://github.com/shw2018/hexo-blog-fly.git">hexo-blog-fly</a>博客主题，该主题是基于<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>优化的，需要把博客相关信息换成您自己的就可以部署了，极大简化了构建博客的工作量和复杂度。</p><h4 id="2-1-简单使用方法"><a href="#2-1-简单使用方法" class="headerlink" title="2.1 简单使用方法"></a>2.1 简单使用方法</h4><ol><li>安装<code>Git</code>, 安装<code>nodeJS</code>，安装<code>Hexo</code></li><li>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地博客文件夹内</li><li>在本地博客仓库运行<code>npm i</code>命令安装依赖包</li><li>直接修改配置信息，改成自己的信息</li><li>运行命令<code>hexo clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><h4 id="2-2-原主题特性"><a href="#2-2-原主题特性" class="headerlink" title="2.2 原主题特性:"></a>2.2 原主题特性:</h4><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><h4 id="2-3-新增加特性"><a href="#2-3-新增加特性" class="headerlink" title="2.3 新增加特性:"></a>2.3 新增加特性:</h4><ul><li>修改了原主题的一些很多bug</li><li>加入图片懒加载功能，在根目录配置文件开启和关闭</li><li>增加留言板功能</li><li>在关于板块,加入简历功能页</li><li>增加视听[视觉听觉影音]板块 </li><li>支持emoji表情，用markdown emoji语法书写直接生成对应的能跳跃的表情。</li><li>增加网站运行时间显示 </li><li>增加动漫模型 </li><li>整体替换Banner图片和文章特色图片</li><li>增加分类相册功能</li><li>修改了一些控件的参数</li><li>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观</li><li>解决首页文章列表卡片上方 border-radius圆角失效的bug</li><li>添加页面樱花飘落动效</li><li>添加鼠标点击烟花爆炸动效</li><li>加入天气接口控件</li><li>加入鼠标点击文字特效</li><li>添加页面雪花飘落动效</li><li>添加在线聊天插件</li><li>调整线聊天插件参数，使之能够随着鼠标滑动位置自适应调整</li><li>持续更新…</li></ul><hr><h4 id="2-4-切换主题"><a href="#2-4-切换主题" class="headerlink" title="2.4 切换主题"></a>2.4 切换主题</h4><p>如果想自己动手对<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>优化的话，可以修改Hexo根目录下的<code> _config.yml</code>的 <code>theme</code> 的值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_config.yml</code> 文件的其它修改建议:</p><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h4 id="2-5-新建分类-categories-页"><a href="#2-5-新建分类-categories-页" class="headerlink" title="2.5 新建分类 categories 页"></a>2.5 新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: categoriesdate: <span class="token number">2018</span>-09-30 <span class="token number">17</span>:25:30type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-新建标签-tags-页"><a href="#2-6-新建标签-tags-页" class="headerlink" title="2.6 新建标签 tags 页"></a>2.6 新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: tagsdate: <span class="token number">2018</span>-09-30 <span class="token number">18</span>:23:38type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-新建关于我-about-页"><a href="#2-7-新建关于我-about-页" class="headerlink" title="2.7 新建关于我 about 页"></a>2.7 新建关于我 about 页</h4><p><code>about</code> 页是用来展示关于我和我的博客信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: aboutdate: <span class="token number">2018</span>-09-30 <span class="token number">17</span>:25:30type: <span class="token string">"about"</span>layout: <span class="token string">"about"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-8-新建留言板-contact-页（可选的）"><a href="#2-8-新建留言板-contact-页（可选的）" class="headerlink" title="2.8 新建留言板 contact 页（可选的）"></a>2.8 新建留言板 contact 页（可选的）</h4><p><code>contact</code> 页是用来展示留言板信息的页面，前提是已经开启了第三方评论系统才能显示。如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: contactdate: <span class="token number">2018</span>-09-30 <span class="token number">17</span>:25:30type: <span class="token string">"contact"</span>layout: <span class="token string">"contact"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-新建友情链接-friends-页（可选的）"><a href="#2-9-新建友情链接-friends-页（可选的）" class="headerlink" title="2.9 新建友情链接 friends 页（可选的）"></a>2.9 新建友情链接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示友情链接信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: friendsdate: <span class="token number">2018</span>-12-12 <span class="token number">21</span>:25:30type: <span class="token string">"friends"</span>layout: <span class="token string">"friends"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token builtin class-name">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span>,    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"码酱"</span>,    <span class="token string">"introduction"</span><span class="token builtin class-name">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span>,    <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"http://luokangyuan.com/"</span>,    <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token builtin class-name">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span>,    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"闪烁之狐"</span>,    <span class="token string">"introduction"</span><span class="token builtin class-name">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span>,    <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://blinkfox.github.io/"</span>,    <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token builtin class-name">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span>,    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"ja_rome"</span>,    <span class="token string">"introduction"</span><span class="token builtin class-name">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span>,    <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span>,    <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-10-一级菜单导航配置"><a href="#2-10-一级菜单导航配置" class="headerlink" title="2.10 一级菜单导航配置"></a>2.10 一级菜单导航配置</h4><p>配置基本菜单导航的名称、路径<code>url</code>和图标<code>icon</code></p><ul><li>菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或主页) </li><li>图标<code>icon</code> 可以在<code>Font Awesome</code> 中查找</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-11-二级菜单配置方法"><a href="#2-11-二级菜单配置方法" class="headerlink" title="2.11 二级菜单配置方法"></a>2.11 二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ul><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)</li><li>在<code>children</code>下创建二级菜单的 名称<code>name</code>,路径<code>url</code>和图标<code>icon</code>.</li><li>注意每个二级菜单模块前要加 -.</li><li>注意缩进格式</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean</code> &amp;&amp; <code>hexo g</code> 重新生成博客文件。</p><h4 id="2-12-代码高亮"><a href="#2-12-代码高亮" class="headerlink" title="2.12 代码高亮"></a>2.12 代码高亮</h4><p>由于 <code>Hexo</code> 自带的代码高亮主题显示不好看，所以主题中使用到了 <code>hexo-prism-plugin</code> 的 <code>Hexo</code> 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 <code>Hexo</code> 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">highlight:  enable: <span class="token boolean">false</span>prism_plugin:  mode: <span class="token string">'preprocess'</span>    <span class="token comment"># realtime/preprocess</span>  theme: <span class="token string">'tomorrow'</span>  line_number: <span class="token boolean">false</span>    <span class="token comment"># default false</span>  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>更多代码块优化详细内容请访问：<a href="http://luckyzmj.cn/posts/1b9a9e28.html">http://luckyzmj.cn/posts/1b9a9e28.html</a></p></blockquote><h4 id="2-13-搜索"><a href="#2-13-搜索" class="headerlink" title="2.13 搜索"></a>2.13 搜索</h4><p>本主题中还使用到了 <code>hexo-generator-search</code> 的 <code>Hexo</code> 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>Hexo</code> 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-14-文章字数统计插件（建议安装）"><a href="#2-14-文章字数统计插件（建议安装）" class="headerlink" title="2.14 文章字数统计插件（建议安装）"></a>2.14 文章字数统计插件（建议安装）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <code>hexo-wordcount</code> 插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">postInfo:  date: <span class="token boolean">true</span>  update: <span class="token boolean">false</span>  wordCount: <span class="token boolean">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  totalCount: <span class="token boolean">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  min2read: <span class="token boolean">false</span> <span class="token comment"># 阅读时长.</span>  readCount: <span class="token boolean">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-15-添加emoji表情支持（可选的）"><a href="#2-15-添加emoji表情支持（可选的）" class="headerlink" title="2.15 添加emoji表情支持（可选的）"></a>2.15 添加emoji表情支持（可选的）</h4><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <code>hexo-filter-github-emojis</code> 的 <code>Hexo</code> 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown</code> <code>emoji</code>语法（::,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>Hexo</code> 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">githubEmojis:  enable: <span class="token boolean">true</span>  className: github-emoji  inject: <span class="token boolean">true</span>  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-16-添加-RSS-订阅支持（可选的）"><a href="#2-16-添加-RSS-订阅支持（可选的）" class="headerlink" title="2.16 添加 RSS 订阅支持（可选的）"></a>2.16 添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了<code>hexo-generator-feed</code>  的 <code>Hexo</code> 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>Hexo</code> 根目录下的<code> _config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">feed:  type: atom  path: atom.xml  limit: <span class="token number">20</span>  hub:  content:  content_limit: <span class="token number">140</span>  content_limit_delim: <span class="token string">' '</span>  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean</code> &amp;&amp; <code>hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h4 id="2-17-添加-DaoVoice-在线聊天功能（可选的）"><a href="#2-17-添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="2.17 添加 DaoVoice 在线聊天功能（可选的）"></a>2.17 添加 DaoVoice 在线聊天功能（可选的）</h4><p>前往 <code>DaoVoice</code> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="2-18-添加-Tidio-在线聊天功能（可选的）"><a href="#2-18-添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="2.18 添加 Tidio 在线聊天功能（可选的）"></a>2.18 添加 Tidio 在线聊天功能（可选的）</h4><p>前往 <code>Tidio</code> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="2-19-修改页脚"><a href="#2-19-修改页脚" class="headerlink" title="2.19 修改页脚"></a>2.19 修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h4 id="2-20-修改社交链接"><a href="#2-20-修改社交链接" class="headerlink" title="2.20 修改社交链接"></a>2.20 修改社交链接</h4><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <code>Font Awesome</code> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: fab fa-facebook</li><li>Twitter: fab fa-twitter</li><li>Google-plus: fab fa-google-plus</li><li>Linkedin: fab fa-linkedin</li><li>Tumblr: fab fa-tumblr</li><li>Medium: fab fa-medium</li><li>Slack: fab fa-slack</li><li>Sina Weibo: fab fa-weibo</li><li>Wechat: fab fa-weixin</li><li>QQ: fab fa-qq</li><li>Zhihu: fab fa-zhihu</li></ul><p>注意: 本主题中使用的 <code>Font Awesome</code> 版本为 5.11.0。</p><h4 id="2-21-修改打赏的二维码图片"><a href="#2-21-修改打赏的二维码图片" class="headerlink" title="2.21 修改打赏的二维码图片"></a>2.21 修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="2-22-配置音乐播放器（可选的）"><a href="#2-22-配置音乐播放器（可选的）" class="headerlink" title="2.22 配置音乐播放器（可选的）"></a>2.22 配置音乐播放器（可选的）</h4><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活<code>music</code>配置即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 是否在首页显示音乐</span>music:  enable: <span class="token boolean">true</span>  title:         <span class="token comment">#非吸底模式有效</span>    enable: <span class="token boolean">true</span>    show: 听听音乐  server: netease   <span class="token comment">#require music platform: netease, tencent, kugou, xiami, baidu</span>  type: playlist    <span class="token comment">#require song, playlist, album, search, artist</span>  id: <span class="token number">503838841</span>     <span class="token comment">#require song id / playlist id / album id / search keyword</span>  fixed: <span class="token boolean">false</span>      <span class="token comment"># 开启吸底模式</span>  autoplay: <span class="token boolean">false</span>   <span class="token comment"># 是否自动播放</span>  theme: <span class="token string">'#42b983'</span>  loop: <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  order: <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  preload: <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  volume: <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  listFolded: <span class="token boolean">true</span>  <span class="token comment"># 列表默认折叠</span>提示：    server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。    type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）    id获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist的id即为这串数字。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-23文章-Front-matter-介绍"><a href="#2-23文章-Front-matter-介绍" class="headerlink" title="2.23文章 Front-matter 介绍"></a>2.23文章 Front-matter 介绍</h4><p><code>Front-matter</code> 选项中的所有内容均为非必填的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">注意:    如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。    <span class="token function">date</span> 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 <span class="token function">id</span> 是通过 <span class="token function">date</span> 的值来作为唯一标识的。    如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。    您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为文章的 <code>Front-matter</code> 示例。<br>最简示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: typora-vue-theme主题介绍date: <span class="token number">2018</span>-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最全示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: theme主题介绍date: <span class="token number">2018</span>-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: <span class="token boolean">true</span>cover: <span class="token boolean">true</span>coverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: <span class="token boolean">false</span>mathjax: <span class="token boolean">false</span>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-24-自定制修改"><a href="#2-24-自定制修改" class="headerlink" title="2.24 自定制修改"></a>2.24 自定制修改</h4><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li>favicon 和 Logo</li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li>Gitalk、Gitment、Valine 和 disqus 评论配置</li><li>不蒜子统计和谷歌分析（Google Analytics）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图</li></ul><p>我认为个人博客应该都有自己的风格和特色。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 _config.yml 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：<br>修改主题颜色</p><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token comment">/* background-color: #eaeaea; */</span>    <span class="token comment">/* 增加背景壁纸*/</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"http://luckyzmj.cn/img/yun.jpg"</span><span class="token punctuation">)</span></span> 0px 0px<span class="token punctuation">;</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #34495e<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-25-修改-banner-图和文章特色图"><a href="#2-25-修改-banner-图和文章特色图" class="headerlink" title="2.25 修改 banner 图和文章特色图"></a>2.25 修改 banner 图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">$<span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span>.<span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> + new <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>.<span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h4 id="2-26-优化目录栏"><a href="#2-26-优化目录栏" class="headerlink" title="2.26 优化目录栏"></a>2.26 优化目录栏</h4><p>在 <code>themes\Matery\layout\_partial\post-detail-toc.ejs</code>，修改内容如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.toc-widget</span> <span class="token punctuation">{</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 345px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span>0.7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 10px 35px 2px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .15<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 5px 15px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .07<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 2px 5px -5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .1<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#toc-content</span> <span class="token punctuation">{</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x005-更多详细教程"><a href="#0x005-更多详细教程" class="headerlink" title="0x005 更多详细教程"></a>0x005 更多详细教程</h2><p>以下几篇文章都是基于<code>Hexo</code>框架和<code>hexo-theme-matery</code>主题优化的教程，大家如果遇到问题，可以参考其中的方法。</p><ul><li><a href="https://sunhwee.com/posts/6e8839eb.html">Hexo+Github博客搭建完全教程</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery作者教程</a></li><li><a href="https://yafine-blog.cn/posts/4ab2.html">Hexo+github搭建博客(超级详细版，精细入微)</a></li><li><a href="https://blog.csdn.net/cungudafa/article/details/106278206">hexo（matery）背景、滚动条优化+增加点击跳评论</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
